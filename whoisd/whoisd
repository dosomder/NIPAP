#!/usr/bin/env python

import SocketServer

import pynipap
from pynipap import Prefix, NipapError

__version__ = '0.18.0'

def format_line(key, value):
    if value is None:
        return ''

    return "%-20s %s\n" % (key + ':', value)

def format_prefix(p):
    if p.family == 4:
        res = format_line("inetnum", p.prefix)
    else:
        res = format_line("inet6num", p.prefix)
    res += format_line('vrf-rt', p.vrf.rt)
    res += format_line('vrf-name', p.vrf.name)
    res += format_line('descr', p.description)
    res += format_line('comment', p.comment)
    res += format_line('country', p.country)
    res += format_line('order', p.order_id)
    res += format_line('node', p.node)
    res += format_line('monitor', p.monitor)
    res += format_line('alarm-priority', p.alarm_priority)
    return res


class WhoisServer(SocketServer.BaseRequestHandler):
    def handle(self):
        # receive data
        query = ''
        while True:
            data = self.request.recv(1024)
            query += data
            if len(data) < 1024:
                break

        query = query.strip()

        # respond!
        response = '% This is the NIPAP whois query service.\n\n'

        res = Prefix.smart_search(query, { })

        if len(res['result']) == 0:
            response += "%ERROR:101: no entries found\n"
            response += "%\n"
            response += "% No entries found in source NIPAP.\n"
        else:
            for p in res['result']:
                response += format_prefix(p)
                response += '\n'

        response += "\n%% This query was served by the NIPAP whois server version %s\n" % __version__
        self.request.send(response)



if __name__ == '__main__':
    pynipap.xmlrpc_uri = 'http://test@local:test@127.0.0.1:1337'
    ao = pynipap.AuthOptions({'authoritative_source': 'nipap'})

    import optparse
    parser = optparse.OptionParser()
    parser.add_option("--port", type=int, default=43, help="Port to listen to")

    (options, args) = parser.parse_args()

    server = SocketServer.ForkingTCPServer(('0.0.0.0', options.port), WhoisServer)
    server.serve_forever()
